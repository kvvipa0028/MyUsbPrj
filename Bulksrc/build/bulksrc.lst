C51 COMPILER V9.01   BULKSRC                                                               07/28/2015 07:54:37 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE BULKSRC
OBJECT MODULE PLACED IN .\bulksrc.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE ..\src\bulksrc.c BROWSE DEBUG OBJECTEXTEND PRINT(.\bulk
                    -src.lst) OBJECT(.\bulksrc.obj)

line level    source

   1          #pragma NOIV               // Do not generate interrupt vectors
   2          //-----------------------------------------------------------------------------
   3          //   File:      bulksrc.c
   4          //   Contents:   Hooks required to implement USB peripheral function.
   5          //
   6          // $Archive: /USB/Examples/FX2LP/bulksrc/bulksrc.c $
   7          // $Date: 3/23/05 2:56p $
   8          // $Revision: 3 $
   9          //
  10          //   Copyright (c) 2000 Cypress Semiconductor All rights reserved
  11          //-----------------------------------------------------------------------------
  12          #include "../inc/fx2.h"
  13          #include "../inc/fx2regs.h"
  14          #include "../inc/syncdly.h"            // SYNCDELAY macro
  15          
  16          extern BOOL GotSUD;             // Received setup data flag
  17          extern BOOL Sleep;
  18          extern BOOL Rwuen;
  19          extern BOOL Selfpwr;
  20          
  21          BYTE Configuration;             // Current configuration
  22          BYTE AlternateSetting;          // Alternate settings
  23          BYTE xdata myBuffer[512];
  24          WORD myBufferCount;
  25          WORD packetSize;
  26          
  27          //-----------------------------------------------------------------------------
  28          // Task Dispatcher hooks
  29          //   The following hooks are called by the task dispatcher.
  30          //-----------------------------------------------------------------------------
  31          
  32          void TD_Init(void)              // Called once at startup
  33          {
  34   1        int i;
  35   1      
  36   1        // set the CPU clock to 48MHz
  37   1        CPUCS = ((CPUCS & ~bmCLKSPD) | bmCLKSPD1) ;
  38   1      
  39   1        // set the slave FIFO interface to 48MHz
  40   1        IFCONFIG |= 0x40;
  41   1      
  42   1        // Registers which require a synchronization delay, see section 15.14
  43   1        // FIFORESET        FIFOPINPOLAR
  44   1        // INPKTEND         OUTPKTEND
  45   1        // EPxBCH:L         REVCTL
  46   1        // GPIFTCB3         GPIFTCB2
  47   1        // GPIFTCB1         GPIFTCB0
  48   1        // EPxFIFOPFH:L     EPxAUTOINLENH:L
  49   1        // EPxFIFOCFG       EPxGPIFFLGSEL
  50   1        // PINFLAGSxx       EPxFIFOIRQ
  51   1        // EPxFIFOIE        GPIFIRQ
  52   1        // GPIFIE           GPIFADRH:L
  53   1        // UDMACRCH:L       EPxGPIFTRIG
  54   1        // GPIFTRIG
C51 COMPILER V9.01   BULKSRC                                                               07/28/2015 07:54:37 PAGE 2   

  55   1        
  56   1        // Note: The pre-REVE EPxGPIFTCH/L register are affected, as well...
  57   1        //      ...these have been replaced by GPIFTC[B3:B0] registers
  58   1      
  59   1        // default: all endpoints have their VALID bit set
  60   1        // default: TYPE1 = 1 and TYPE0 = 0 --> BULK  
  61   1        // default: EP2 and EP4 DIR bits are 0 (OUT direction)
  62   1        // default: EP6 and EP8 DIR bits are 1 (IN direction)
  63   1        // default: EP2, EP4, EP6, and EP8 are double buffered
  64   1      
  65   1        // we are just using the default values, yes this is not necessary...
  66   1        EP1OUTCFG = 0xA0;
  67   1        EP1INCFG = 0xA0;
  68   1        SYNCDELAY;                    // see TRM section 15.14
  69   1        EP2CFG = 0xA2;
  70   1        SYNCDELAY;                    // 
  71   1        EP4CFG = 0xA0;
  72   1        SYNCDELAY;                    // 
  73   1        EP6CFG = 0xE2;
  74   1        SYNCDELAY;                    // 
  75   1        EP8CFG = 0xE0;
  76   1      
  77   1        // out endpoints do not come up armed
  78   1        
  79   1        // since the defaults are double buffered we must write dummy byte counts twice
  80   1        SYNCDELAY;                    // 
  81   1        EP2BCL = 0x80;                // arm EP2OUT by writing byte count w/skip.
  82   1        SYNCDELAY;                    // 
  83   1        EP4BCL = 0x80;    
  84   1        SYNCDELAY;                    // 
  85   1        EP2BCL = 0x80;                // arm EP4OUT by writing byte count w/skip.
  86   1        SYNCDELAY;                    // 
  87   1        EP4BCL = 0x80;    
  88   1      
  89   1        // fill up both IN endpoints
  90   1      
  91   1        for (i=0;i<512;i++)
  92   1        {
  93   2               //EP2FIFOBUF[i] = i+1;
  94   2           EP6FIFOBUF[i] = i+2;
  95   2        }
  96   1        SYNCDELAY;                    // 
  97   1        EP6BCH = 0x02;
  98   1        SYNCDELAY;                    // 
  99   1        EP6BCL = 0x00;
 100   1      
 101   1        for (i=0;i<512;i++)
 102   1        {
 103   2           EP6FIFOBUF[i] = i+5;
 104   2               EP8FIFOBUF[i] = i+10;
 105   2        }
 106   1        SYNCDELAY;                    // 
 107   1        EP6BCH = 0x02; 
 108   1        EP8BCH = 0x02;
 109   1        SYNCDELAY;                    // 
 110   1        EP6BCL = 0x00;                                   
 111   1        EP8BCL = 0x00;
 112   1      
 113   1        myBufferCount = 0;
 114   1      
 115   1        // enable dual autopointer(s)
 116   1        AUTOPTRSETUP |= 0x01;  
C51 COMPILER V9.01   BULKSRC                                                               07/28/2015 07:54:37 PAGE 3   

 117   1      
 118   1      }
 119          
 120          void TD_Poll(void)              // Called repeatedly while the device is idle
 121          {
 122   1         int i;
 123   1      
 124   1         // if there is some data in EP2 OUT, re-arm it
 125   1         if(!(EP2468STAT & bmEP2EMPTY))
 126   1         {
 127   2            SYNCDELAY;                // 
 128   2            EP2BCL = 0x80;              
 129   2                SYNCDELAY; 
 130   2         }                                    
 131   1         // if EP6 IN is available, re-arm it
 132   1         if(!(EP2468STAT & bmEP6FULL))
 133   1         {
 134   2            SYNCDELAY;                // 
 135   2            EP6BCH = 0x02;
 136   2            SYNCDELAY;                // 
 137   2            EP6BCL = 0x00;                       
 138   2                //EP2FIFOBUF[1] = 0x10;
 139   2         }
 140   1      
 141   1         // if there is new data in EP4FIFOBUF, then copy it to a temporary buffer
 142   1         if(!(EP2468STAT & bmEP4EMPTY))
 143   1         {
 144   2            APTR1H = MSB( &EP4FIFOBUF );
 145   2            APTR1L = LSB( &EP4FIFOBUF );
 146   2      
 147   2            AUTOPTRH2 = MSB( &myBuffer );
 148   2            AUTOPTRL2 = LSB( &myBuffer );
 149   2      
 150   2            myBufferCount = (EP4BCH << 8) + EP4BCL;
 151   2      
 152   2            for( i = 0x0000; i < myBufferCount; i++ )
 153   2            {
 154   3               EXTAUTODAT2 = EXTAUTODAT1;
 155   3            }
 156   2      
 157   2            SYNCDELAY;                // 
 158   2            EP4BCL = 0x80;            // re(arm) EP4OUT
 159   2         }
 160   1      
 161   1         // if there is room in EP8IN, then copy the contents of the temporarty buffer to it
 162   1         if(!(EP2468STAT & bmEP8FULL) && myBufferCount)
 163   1         {
 164   2            APTR1H = MSB( &myBuffer );
 165   2            APTR1L = LSB( &myBuffer );
 166   2      
 167   2            AUTOPTRH2 = MSB( &EP8FIFOBUF );
 168   2            AUTOPTRL2 = LSB( &EP8FIFOBUF );
 169   2      
 170   2            for( i = 0x0000; i < myBufferCount; i++ )
 171   2            {
 172   3               // setup to transfer EP4OUT buffer to EP8IN buffer using AUTOPOINTER(s) in SFR space
 173   3               EXTAUTODAT2 = EXTAUTODAT1;
 174   3            }
 175   2            SYNCDELAY;                    // 
 176   2            EP8BCH = MSB(myBufferCount);
 177   2            SYNCDELAY;                    // 
 178   2            EP8BCL = LSB(myBufferCount);  // arm EP8IN
C51 COMPILER V9.01   BULKSRC                                                               07/28/2015 07:54:37 PAGE 4   

 179   2         }
 180   1      
 181   1      }  // end void TD_Poll(void) 
 182          
 183          BOOL TD_Suspend(void)          // Called before the device goes into suspend mode
 184          {
 185   1         return(TRUE);
 186   1      }
 187          
 188          BOOL TD_Resume(void)          // Called after the device resumes
 189          {
 190   1         return(TRUE);
 191   1      }
 192          
 193          //-----------------------------------------------------------------------------
 194          // Device Request hooks
 195          //   The following hooks are called by the end point 0 device request parser.
 196          //-----------------------------------------------------------------------------
 197          
 198          BOOL DR_GetDescriptor(void)
 199          {
 200   1         return(TRUE);
 201   1      }
 202          
 203          BOOL DR_SetConfiguration(void)   // Called when a Set Configuration command is received
 204          {
 205   1         Configuration = SETUPDAT[2];
 206   1         return(TRUE);            // Handled by user code
 207   1      }
 208          
 209          BOOL DR_GetConfiguration(void)   // Called when a Get Configuration command is received
 210          {
 211   1         EP0BUF[0] = Configuration;
 212   1         EP0BCH = 0;
 213   1         EP0BCL = 1;
 214   1         return(TRUE);            // Handled by user code
 215   1      }
 216          
 217          BOOL DR_SetInterface(void)       // Called when a Set Interface command is received
 218          {
 219   1         AlternateSetting = SETUPDAT[2];
 220   1         return(TRUE);            // Handled by user code
 221   1      }
 222          
 223          BOOL DR_GetInterface(void)       // Called when a Set Interface command is received
 224          {
 225   1         EP0BUF[0] = AlternateSetting;
 226   1         EP0BCH = 0;
 227   1         EP0BCL = 1;
 228   1         return(TRUE);            // Handled by user code
 229   1      }
 230          
 231          BOOL DR_GetStatus(void)
 232          {
 233   1         return(TRUE);
 234   1      }
 235          
 236          BOOL DR_ClearFeature(void)
 237          {
 238   1         return(TRUE);
 239   1      }
 240          
C51 COMPILER V9.01   BULKSRC                                                               07/28/2015 07:54:37 PAGE 5   

 241          BOOL DR_SetFeature(void)
 242          {
 243   1         return(TRUE);
 244   1      }
 245          
 246          BOOL DR_VendorCmnd(void)
 247          {
 248   1         return(TRUE);
 249   1      }
 250          
 251          //-----------------------------------------------------------------------------
 252          // USB Interrupt Handlers
 253          //   The following functions are called by the USB interrupt jump table.
 254          //-----------------------------------------------------------------------------
 255          
 256          // Setup Data Available Interrupt Handler
 257          void ISR_Sudav(void) interrupt 0
 258          {
 259   1         GotSUD = TRUE;            // Set flag
 260   1         EZUSB_IRQ_CLEAR();
 261   1         USBIRQ = bmSUDAV;         // Clear SUDAV IRQ
 262   1      }
 263          
 264          // Setup Token Interrupt Handler
 265          void ISR_Sutok(void) interrupt 0
 266          {
 267   1         EZUSB_IRQ_CLEAR();
 268   1         USBIRQ = bmSUTOK;         // Clear SUTOK IRQ
 269   1      }
 270          
 271          void ISR_Sof(void) interrupt 0
 272          {
 273   1         EZUSB_IRQ_CLEAR();
 274   1         USBIRQ = bmSOF;            // Clear SOF IRQ
 275   1      }
 276          
 277          void ISR_Ures(void) interrupt 0
 278          {
 279   1         if (EZUSB_HIGHSPEED())
 280   1         {
 281   2            pConfigDscr = pHighSpeedConfigDscr;
 282   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 283   2            packetSize = 512;
 284   2      
 285   2         }
 286   1         else
 287   1         {
 288   2            pConfigDscr = pFullSpeedConfigDscr;
 289   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 290   2            packetSize = 64;
 291   2         }
 292   1         
 293   1         EZUSB_IRQ_CLEAR();
 294   1         USBIRQ = bmURES;         // Clear URES IRQ
 295   1      }
 296          
 297          void ISR_Susp(void) interrupt 0
 298          {
 299   1         Sleep = TRUE;
 300   1         EZUSB_IRQ_CLEAR();
 301   1         USBIRQ = bmSUSP;
 302   1      }
C51 COMPILER V9.01   BULKSRC                                                               07/28/2015 07:54:37 PAGE 6   

 303          
 304          void ISR_Highspeed(void) interrupt 0
 305          {
 306   1         if (EZUSB_HIGHSPEED())
 307   1         {
 308   2            pConfigDscr = pHighSpeedConfigDscr;
 309   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 310   2            packetSize = 512;
 311   2      
 312   2         }
 313   1         else
 314   1         {
 315   2            pConfigDscr = pFullSpeedConfigDscr;
 316   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 317   2            packetSize = 64;
 318   2         }
 319   1      
 320   1         EZUSB_IRQ_CLEAR();
 321   1         USBIRQ = bmHSGRANT;
 322   1      }
 323          void ISR_Ep0ack(void) interrupt 0
 324          {
 325   1      }
 326          void ISR_Stub(void) interrupt 0
 327          {
 328   1      }
 329          void ISR_Ep0in(void) interrupt 0
 330          {
 331   1      }
 332          void ISR_Ep0out(void) interrupt 0
 333          {
 334   1      }
 335          void ISR_Ep1in(void) interrupt 0
 336          {
 337   1      }
 338          void ISR_Ep1out(void) interrupt 0
 339          {
 340   1      }
 341          void ISR_Ep2inout(void) interrupt 0
 342          {
 343   1      }
 344          void ISR_Ep4inout(void) interrupt 0
 345          {
 346   1      }
 347          void ISR_Ep6inout(void) interrupt 0
 348          {
 349   1      }
 350          void ISR_Ep8inout(void) interrupt 0
 351          {
 352   1      }
 353          void ISR_Ibn(void) interrupt 0
 354          {
 355   1      }
 356          void ISR_Ep0pingnak(void) interrupt 0
 357          {
 358   1      }
 359          void ISR_Ep1pingnak(void) interrupt 0
 360          {
 361   1      }
 362          void ISR_Ep2pingnak(void) interrupt 0
 363          {
 364   1      }
C51 COMPILER V9.01   BULKSRC                                                               07/28/2015 07:54:37 PAGE 7   

 365          void ISR_Ep4pingnak(void) interrupt 0
 366          {
 367   1      }
 368          void ISR_Ep6pingnak(void) interrupt 0
 369          {
 370   1      }
 371          void ISR_Ep8pingnak(void) interrupt 0
 372          {
 373   1      }
 374          void ISR_Errorlimit(void) interrupt 0
 375          {
 376   1      }
 377          void ISR_Ep2piderror(void) interrupt 0
 378          {
 379   1      }
 380          void ISR_Ep4piderror(void) interrupt 0
 381          {
 382   1      }
 383          void ISR_Ep6piderror(void) interrupt 0
 384          {
 385   1      }
 386          void ISR_Ep8piderror(void) interrupt 0
 387          {
 388   1      }
 389          void ISR_Ep2pflag(void) interrupt 0
 390          {
 391   1      }
 392          void ISR_Ep4pflag(void) interrupt 0
 393          {
 394   1      }
 395          void ISR_Ep6pflag(void) interrupt 0
 396          {
 397   1      }
 398          void ISR_Ep8pflag(void) interrupt 0
 399          {
 400   1      }
 401          void ISR_Ep2eflag(void) interrupt 0
 402          {
 403   1      }
 404          void ISR_Ep4eflag(void) interrupt 0
 405          {
 406   1      }
 407          void ISR_Ep6eflag(void) interrupt 0
 408          {
 409   1      }
 410          void ISR_Ep8eflag(void) interrupt 0
 411          {
 412   1      }
 413          void ISR_Ep2fflag(void) interrupt 0
 414          {
 415   1      }
 416          void ISR_Ep4fflag(void) interrupt 0
 417          {
 418   1      }
 419          void ISR_Ep6fflag(void) interrupt 0
 420          {
 421   1      }
 422          void ISR_Ep8fflag(void) interrupt 0
 423          {
 424   1      }
 425          void ISR_GpifComplete(void) interrupt 0
 426          {
C51 COMPILER V9.01   BULKSRC                                                               07/28/2015 07:54:37 PAGE 8   

 427   1      }
 428          void ISR_GpifWaveform(void) interrupt 0
 429          {
 430   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    751    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    512    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
